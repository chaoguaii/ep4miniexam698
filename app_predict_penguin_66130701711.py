# -*- coding: utf-8 -*-
"""LabTest-66130701711-Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10T_XnGME6INAMhMOax9bI4X9dj65pXkt

#  LabTest: ML model deployment

ปรับแต่งโค้ดที่ให้มาเพื่อสร้างโมเดล และ Deploy บน Streamlit


 ส่ง
- LabTest-xxx.ipynb
- model_penguin_xxx.pkl
- app_predict_penguin_XXX.py
- LabTest-xxx.pdf
"""

import os
os.chdir('/content/drive/MyDrive/!!!Workshop698-1-67/Mini-Exam')

"""## Import Packages"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
import pickle

"""## Prepare Data"""

df_org = pd.read_csv("penguins_size.csv")
df_org.head()

df = df_org.copy()
df.head()

"""## Handle Missing Data"""

df.isna().sum()/len(df)*100

df= df.dropna(subset = ['culmen_length_mm', 'culmen_depth_mm','flipper_length_mm', 'body_mass_g'])
df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
df['sex'] = df['sex'].replace(to_replace='.', value = df['sex'].mode()[0])

df.isna().sum()/len(df)*100

"""## Categotical Encoding"""

df.columns

df['species'].unique()
# df['island'].unique()
# df['sex'].unique()

#Encoding the object columns.
from sklearn.preprocessing import LabelEncoder

# species_encoder = LabelEncoder().fit(['Adelie', 'Chinstrap', 'Gentoo'])
species_encoder = LabelEncoder().fit(df['species'])

# island_encoder = LabelEncoder().fit(['Torgersen', 'Biscoe', 'Dream'])
island_encoder = LabelEncoder().fit(df['island'])

# sex_encoder = LabelEncoder().fit(['MALE', 'FEMALE'])
sex_encoder = LabelEncoder().fit(df['sex'])

species_encoder.classes_

"""## Train/Test Data Split"""

X = df.drop('species', axis=1)
y = df['species']

# Split data into features and target
# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Trining / Create Model using XXX Alg"""

# Import necessary libraries
import pandas as pd
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split


# Define categorical and numerical features
categorical_features = ['island', 'sex']  # Moved 'sex' to categorical_features
numerical_features = ['culmen_length_mm', 'culmen_depth_mm', 'flipper_length_mm', 'body_mass_g']  # Removed 'sex' from numerical_features

# Create transformers for numerical and categorical data
numerical_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(sparse_output=False, handle_unknown='ignore'))  # Use OneHotEncoder for categorical features
])

# Combine transformers using ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Create the final pipeline
# Changed random_state to a valid integer value within the allowed range
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier(random_state=42))
])

# Fit the pipeline
model.fit(X_train, y_train)

"""## Testing / Evaluation"""

# Make predictions
y_pred = model.predict(X_test)

summary_eval = classification_report(y_test,y_pred,digits=4)
print(summary_eval)

# Calculate the confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Get the unique class labels from the pipeline
# Instead of species_encoder, use the classes_ attribute of the classifier
class_labels = model.named_steps['classifier'].classes_

# Plot the confusion matrix using seaborn heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=class_labels, # Use class_labels directly
            yticklabels=class_labels) # Use class_labels directly
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('True')
# Save the plot as an image file (e.g., PNG)
plt.savefig('confusion_matrix_knn.png')

plt.show()

"""## Save Model and etc."""

# Create a tuple or any container object with your variables
data_to_save = (model, species_encoder, island_encoder ,sex_encoder)

# Open a file in binary write mode
with open('model_penguin_66130701711.pkl', 'wb') as file:
    # Save the container object
    pickle.dump(data_to_save, file)

"""## Load Model and Prediction

Kernel -> Restart Kernel..
"""

import pickle
import pandas as pd

# Assuming your model and encoders were saved in 'model_penguin_66130701711.pkl'
with open(model_path = 'model_penguin_66130701711.pkl', 'rb') as file: # Changed the filename to match the saved file
    # Load the data from the file
    model, species_encoder, island_encoder ,sex_encoder = pickle.load(file)

"""### New data"""

x_new =  pd.DataFrame()
x_new['island'] = ['Torgersen']
x_new['culmen_length_mm'] = [37.0]
x_new['culmen_depth_mm'] = [19.3]
x_new['flipper_length_mm'] = [192.3]
x_new['body_mass_g'] = [3750]
x_new['sex'] = ['MALE']

"""### Categorical Data Encoding"""

x_new['island'] = island_encoder.transform(x_new['island'])
x_new['sex'] = sex_encoder.transform(x_new['sex'])

"""### Predicting"""

y_pred_new = model.predict(x_new)

result = species_encoder.inverse_transform(y_pred_new)

print('Predicted Specie: ', result)

"""### Create app_predict_knn_penguin.py for Running with streamlit

https://docs.streamlit.io/library/api-reference

streamlit run app_predict_knn_penguin.py
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app_predict_penguin_XXX.py
# 
# 
# #66130701711x
# 
#

"""## Deploy on Streamlit Sharing

https://share.streamlit.io/

https://github.com/


"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile requirements.txt
# 
# scikit-learn
# pandas
#